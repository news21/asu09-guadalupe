package com.flashdo.flashblue{    import flash.display.*;	import flash.events.*;    import flash.net.*;    import flash.utils.*;    	import flash.text.*;	//Caurina Tweener	import caurina.transitions.Tweener;	    public class Banner extends MovieClip 	{		public var banner_mc:MovieClip;				public var banner_holder_mc:MovieClip;					public var images_mc:MovieClip;			public var buttons_mc:MovieClip;			public var contents_mc:MovieClip;			public var preloader_mc:PreloaderMC;		public var request:URLRequest;				public var loader:Loader;		public var urlLoader:URLLoader;		public var timer:Timer;		public var sheet:StyleSheet;		public var button_width:int = 0;		public var button_height:int = 0;				public var speed:int = 8;		public var buttonRollOver:Boolean = false;		//XML Variables		public var xmlLoader:XMLLoader;		public var xmlUrl:String;		public var globals:Array;		public var item:Array;		private var audioUsage:String = 'none';		private var urlPath:String;		private var btnWidth:Number = 124;				//Initialize		public function Banner(xml_url:String,urlP:String= '') 		{			xmlUrl = xml_url;			urlPath = urlP;			//addEventListener(Event.ADDED_TO_STAGE,init);		}				//Initialize Banner		public function init(e:Event=null):void		{						trace('init');			//Remove Stage Listener			//removeEventListener(Event.ADDED_TO_STAGE,init);				//Variables			globals = new Array();			item = new Array();			//Style Sheet			sheet = new StyleSheet();			//Banner			banner_mc = new MovieClip();			addChild(banner_mc);			banner_holder_mc = new MovieClip();			banner_mc.addChild(banner_holder_mc);			//Images			images_mc = new MovieClip();			banner_holder_mc.addChild(images_mc);						//Contents			contents_mc = new MovieClip();			banner_holder_mc.addChild(contents_mc);					//Preloader			preloader_mc = new PreloaderMC();			preloader_mc.x = 250;			preloader_mc.y = 188;			preloader_mc.alpha = 0;			preloader_mc.mouseEnabled = false;			preloader_mc.percent_txt.selectable = false;						banner_holder_mc.addChild(preloader_mc);			//Main Preloader			root.loaderInfo.addEventListener(Event.OPEN, setOpen);			root.loaderInfo.addEventListener(ProgressEvent.PROGRESS, setProgresses);			root.loaderInfo.addEventListener(Event.COMPLETE, onComplete);			}				//onComplete		private function onComplete(e:Event):void		{			trace('onComplete');			//Remove Event Listeners			e.target.removeEventListener(Event.OPEN, setOpen);			e.target.removeEventListener(ProgressEvent.PROGRESS, setProgresses);			e.target.removeEventListener(Event.COMPLETE, onComplete);			//Hide Preloader			Tweener.addTween(preloader_mc,{alpha:0,delay:0.3,time:0.3,							 		onComplete:function(){										this.visible = false;									}								}							);			//Load XML			loadXML();		}				//Loads XML file and pushes data into array		public function loadXML():void 		{			trace('loadXML');			xmlLoader = new XMLLoader(xmlUrl);            xmlLoader.addEventListener(XMLLoader.XML_LOADED, onXMLLoaded);            xmlLoader.load();					}				//onXMLLoaded		private function onXMLLoaded(e:Event):void 		{						trace('onXMLLoaded');			//Remove XML Load Event Listener			xmlLoader.removeEventListener(XMLLoader.XML_LOADED, onXMLLoaded);			//Read XML Data			var xml:XML = xmlLoader.getXML();			var i:int = 0;			//Globals			globals.width = parseInt(xml.globals.@width);			globals.height = parseInt(xml.globals.@height);			globals.currentItem = parseInt(xml.globals.@currentItem);			globals.radius = parseInt(xml.globals.@radius);			//Buttons			globals.showButtons = convertToBoolean(xml.globals.@showButtons.toString());			globals.showPlayPauseButton = convertToBoolean(xml.globals.@showPlayPauseButton.toString());				//Content			globals.showContent = convertToBoolean(xml.globals.@showContent.toString());				globals.bgColor = xml.globals.@bgColor.toString().replace("#", "0x");			globals.bgAlpha = xml.globals.@bgAlpha;			globals.bgPaddingBottom = parseInt(xml.globals.@bgPaddingBottom);			globals.titleColor = xml.globals.@titleColor.toString().replace("#", "0x");			globals.titleFontSize = parseInt(xml.globals.@titleFontSize);						globals.descriptionColor = xml.globals.@descriptionColor.toString().replace("#", "0x");			globals.descriptionFontSize = parseInt(xml.globals.@descriptionFontSize);			globals.cssFile = urlPath+xml.globals.@cssFile.toString();			if(xml.globals.@audio.toString() != ''){				audioUsage = 'global';				globals.audio = xml.globals.@audio.toString();			}						//Flash Variables			globals.oldItem = -1;			globals.button = "next";			globals.play = true;			var padding = 10;			if (globals.showPlayPauseButton) {								var button_play_pause_mc:ButtonPlayPauseMC = new ButtonPlayPauseMC();				button_play_pause_mc.name = "button_play_pause_mc";				button_play_pause_mc.play_mc.visible = false;				button_play_pause_mc.mouseChildren = false;				button_play_pause_mc.buttonMode = true;				button_play_pause_mc.addEventListener(MouseEvent.CLICK, buttonPlayPause);				banner_holder_mc.addChild(button_play_pause_mc);				}			if (globals.showButtons) {				//Buttons				buttons_mc = new MovieClip();				buttons_mc.destX = 0;				banner_holder_mc.addChild(buttons_mc);			}			//Items			for (i=0; i<xml.item.length(); i++) {				item[i] = new Object();				item[i].thumbnail = urlPath+xml.item[i].thumbnail.toString();				item[i].image = urlPath+xml.item[i].image.toString();				item[i].title = xml.item[i].title.toString();				item[i].description = xml.item[i].description.toString();				item[i].timer = parseInt(xml.item[i].timer);				item[i].url = xml.item[i].url.toString();				item[i].target = xml.item[i].target.toString();				if(xml.item[i].audio.toString() != '' && audioUsage != 'global') {					audioUsage = 'byslide';					item[i].audio = urlPath+xml.item[i].audio.toString();				}								//Buttons				if (globals.showButtons) {									//Create Button					var button_mc:ButtonMC = new ButtonMC();					button_mc.name = "button_"+i;					button_mc.id = i;					button_mc.x = i*btnWidth;					button_mc.border.width = btnWidth;					button_mc.bg_mc.width = btnWidth;					button_mc.arrow_mc.width = btnWidth;					button_mc.mouseChildren = false;					button_mc.buttonMode = true;					button_width = btnWidth;					button_height = button_mc.bg_mc.height;					//Thumbnail Loader					var thumbLoader:Loader = new Loader();					thumbLoader.load(new URLRequest(item[i].thumbnail));					button_mc.thumb_mc.alpha = 0.5;					button_mc.thumb_mc.addChild(thumbLoader);										if (i==globals.currentItem) {						button_mc.thumb_mc.alpha = 1;						Tweener.addTween(button_mc.arrow_mc,{alpha:1,time:0.3,transition:"linear"});					}					button_mc.addEventListener(MouseEvent.CLICK, buttonDown);					button_mc.addEventListener(MouseEvent.MOUSE_OVER, buttonOver);					button_mc.addEventListener(MouseEvent.MOUSE_OUT, buttonOut);						buttons_mc.addChild(button_mc);									}			}			if (globals.showButtons) {							//Buttons Holder				buttons_mc.y = Math.round(globals.height-button_height);				//Button Shadow				var shadow_mc:ShadowMC = new ShadowMC();				shadow_mc.y = Math.round(globals.height-(shadow_mc.height+button_height));					shadow_mc.width = globals.width;				banner_holder_mc.addChildAt(shadow_mc, 1);						//Change Preloader Y Coordinate				preloader_mc.y = Math.round((globals.height-button_height)/2);					//Add Auto-scroll to buttons				if (globals.showButtons && buttons_mc.width>globals.width) {					buttons_mc.addEventListener(MouseEvent.MOUSE_MOVE,autoScrollMouseMove);					}			}			//Create Mask			setRadius(banner_mc, banner_holder_mc);						if (globals.cssFile.length!=0) {				//Load CSS				loadCSS();			} else {				//Load First Image				loadImage(globals.currentItem);			}		}				//Auto Scroll Buttons		private function autoScrollMouseMove(e:MouseEvent):void 		{						var widths:int = globals.width;			if (mouseX>0 && mouseX<widths) {								var mousePercent:Number = mouseX/widths;				var mSpeed:Number = mousePercent;				buttons_mc.destX = Math.round(-((buttons_mc.width-widths)*mSpeed));							}			buttons_mc.addEventListener(Event.ENTER_FRAME,autoScrollEnterFrame);		}				//Change Y coordinate of Buttons		private function autoScrollEnterFrame(e:Event):void 		{			if (mouseY>(globals.height-button_height)) {				if (buttons_mc.x == buttons_mc.destX) {					buttons_mc.removeEventListener(Event.ENTER_FRAME,autoScrollEnterFrame);				} else if (buttons_mc.x>buttons_mc.destX) {									buttons_mc.x -= Math.ceil((buttons_mc.x-buttons_mc.destX)*(speed/100));				} else if (buttons_mc.x<buttons_mc.destX) {					buttons_mc.x += Math.ceil((buttons_mc.destX-buttons_mc.x)*(speed/100));				}			}		}				//Buttons X coordinate		private function buttonsPosition():void 		{			try {				buttons_mc.removeEventListener(Event.ENTER_FRAME,autoScrollEnterFrame);			} catch(error:Error) {}			var xcoor:int = buttons_mc.x;			var xcoorNew:int = -(Math.round(globals.currentItem*button_width));			if ((buttons_mc.width+xcoorNew)>globals.width && xcoor!=xcoorNew) {				xcoor = xcoorNew;			} else {				xcoor = Math.round(globals.width-buttons_mc.width);			}			Tweener.addTween(buttons_mc,{x:xcoor,time:0.3,transition:"easeOutExpo"});			}				//Load CSS File		private function loadCSS()		{			urlLoader = new URLLoader();			urlLoader.addEventListener(Event.COMPLETE,onCSScomplete);						request = new URLRequest(globals.cssFile);			try 			{				urlLoader.load(request);			} 			catch(error:Error) 			{				trace("Unable to load requested CSS file.");			}		}				//onCSScomplete		private function onCSScomplete(e:Event):void 		{						//Remove Url Load Event Listener			urlLoader.removeEventListener(Event.COMPLETE, onCSScomplete);			//parseCSS			sheet.parseCSS(e.target.data);			//Load First Image			loadImage(globals.currentItem);		}				//Play-Pause Button MouseDown		private function buttonPlayPause(e:MouseEvent):void				{					var button_play_pause_mc = e.target;			if (globals.play) {										removeTimer();				globals.play = false;				button_play_pause_mc.pause_mc.visible = false;				button_play_pause_mc.play_mc.visible = true;				} else {								globals.play = true;				button_play_pause_mc.pause_mc.visible = true;				button_play_pause_mc.play_mc.visible = false;				var old:int = globals.currentItem;				var current = 0;				globals.button = "next";				current = old+1;				if (current==item.length) {					current = 0;				}				globals.oldItem = old;				globals.currentItem = current;				if (globals.showButtons) {					changeButton(old, current);				}				loadImage(current);						}				}				//Button MouseDown		private function buttonDown(e:MouseEvent):void				{			var button_mc = e.target;			if (button_mc.id!=globals.currentItem) {				removeTimer();							var old:int = globals.currentItem;				var current:int = e.target.id;				globals.oldItem = old;				globals.currentItem = current;				if (old<current) {					globals.button = "next";				} else {					globals.button = "previous";				}				changeButton(old, current);				loadImage(current);			}			return;		}				//Button RollOver		private function buttonOver(e:MouseEvent):void				{			buttonRollOver = true;			return;		}				//Button RollOut		private function buttonOut(e:MouseEvent):void				{			buttonRollOver = false;			return;		}				//Change Current Button		private function changeButton(old, current) {			//Old Button			var button_mc = buttons_mc.getChildByName("button_"+old);			Tweener.addTween(button_mc.thumb_mc,{alpha:0.5,time:0.15,transition:"linear"});			Tweener.addTween(button_mc.arrow_mc,{alpha:0,time:0.15,transition:"linear"});			//New Button			button_mc = buttons_mc.getChildByName("button_"+current);			Tweener.addTween(button_mc.thumb_mc,{alpha:1,time:0.15,transition:"linear"});			Tweener.addTween(button_mc.arrow_mc,{alpha:1,time:0.15,transition:"linear"});			if (!buttonRollOver) {				buttonsPosition();			}		}				//Remove timer		private function removeTimer():void		{			if (timer) {				timer.removeEventListener(TimerEvent.TIMER,loadImageByTimer);				timer.stop();				timer = null;			}					}				//Start timer		private function initTimer():void		{			removeTimer();			var i = globals.currentItem;			var time:int = item[i].timer;							timer = new Timer(time*1000,1);			timer.addEventListener(TimerEvent.TIMER,loadImageByTimer);			timer.start();		}				//Load Image By Timer		private function loadImageByTimer(e:TimerEvent):void		{			var old = globals.currentItem;			var current = old+1;						if (current==item.length) {				current = 0;			}			globals.oldItem = old;			globals.currentItem = current;			globals.button = "next";			if (globals.showButtons) {				changeButton(old, current);			}			loadImage(current);		}				//Load Image By Buttons		private function loadImage(i):void		{			if (globals.oldItem!=-1) {				var image_old_mc = images_mc.getChildByName("image_"+globals.oldItem);				Tweener.addTween(image_old_mc,{alpha:0,time:0.2,								 		onComplete:function(){											images_mc.removeChild(this);										}									}								);			}			loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.OPEN,setOpen);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, setProgresses);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE,setComplete);			loader.load(new URLRequest(item[i].image));		}						//Image Preloader Actions		private function setOpen(e:Event):void		{			//Disable Buttons			if (globals.showButtons) {				buttons_mc.enabled = false;			}			//Preloader			preloader_mc.visible = true;			preloader_mc.percent_txt.text = "0";			preloader_mc.percent_mc.mask_right_mc.rotation = 0;			preloader_mc.percent_mc.mask_left_mc.rotation = -180;			Tweener.addTween(preloader_mc,{alpha:1,delay:0.3,time:0.3});		}						//Show percent		private function setProgresses(e:ProgressEvent):void		{			var percent:int = Math.ceil((e.bytesLoaded/e.bytesTotal)*100);			preloader_mc.percent_txt.text = percent.toString();			if (percent<=50) {				preloader_mc.percent_mc.mask_right_mc.rotation = 3.6*percent;				preloader_mc.percent_mc.mask_left_mc.rotation = -180;			} else {				preloader_mc.percent_mc.mask_right_mc.rotation = 180;				preloader_mc.percent_mc.mask_left_mc.rotation = 3.6*percent;			}		}				//Image loading on complete		private function setComplete(e:Event):void		{			//Remove loader events			e.target.removeEventListener(Event.OPEN,setOpen);			e.target.removeEventListener(ProgressEvent.PROGRESS, setProgresses);			e.target.removeEventListener(Event.COMPLETE,setComplete);									//Hide preloader			Tweener.addTween(preloader_mc,{alpha:0,delay:0.3,time:0.3,							 		onComplete:function(){										this.visible = false;									}								}							);						//Current Image			var current = globals.currentItem;			var title = item[current].title;			var description = item[current].description;			var url = item[current].url;			var target = item[current].target;			var widths:int = globals.width;			var heights:int = globals.height;			if (globals.showButtons) {				//Enable Buttons				buttons_mc.enabled = true;			}							var image_mc:MovieClip = new MovieClip();			image_mc.name = "image_"+current;			image_mc.alpha = 0;			image_mc.mouseChildren = false;			if (globals.showContent) {				image_mc.addEventListener(MouseEvent.ROLL_OVER, showContent);				image_mc.addEventListener(MouseEvent.ROLL_OUT, hideContent);			}			//Add Url to Image			if (url.length!=0) {				image_mc.urls = url;				image_mc.targets = target;								image_mc.buttonMode = true;				image_mc.addEventListener(MouseEvent.CLICK, redirect);			}			image_mc.addChild(loader.content);			images_mc.addChild(image_mc);							Tweener.addTween(image_mc,{alpha:1,time:1,transition:"easeOutSine"});			if (globals.showContent && (title.length!=0 || description.length!=0)) {				var padding = 10;				var content_mc:MovieClip = new MovieClip();				content_mc.name = "content_mc";				content_mc.alpha = 0;				//Title Text Format				var title_fmt = new TextFormat();				title_fmt.font = "Verdana";				title_fmt.kerning = true;				title_fmt.size = globals.titleFontSize;				title_fmt.color = globals.titleColor;				title_fmt.leading = 2;				//Title				var title_txt:TextField = new TextField();				title_txt.width = widths-padding*2;				title_txt.x = padding;				title_txt.y = padding;				title_txt.autoSize = TextFieldAutoSize.LEFT;				title_txt.wordWrap = true;				title_txt.defaultTextFormat = title_fmt;						title_txt.embedFonts = true;				title_txt.htmlText = title;				title_txt.multiline = true;				title_txt.selectable = false;				title_txt.antiAliasType = "advanced";				title_txt.styleSheet = sheet;								content_mc.addChild(title_txt);				//Description Text Format								var description_fmt = new TextFormat();				description_fmt.font = "Arial";				description_fmt.kerning = true;				description_fmt.size = globals.descriptionFontSize;				description_fmt.color = globals.descriptionColor;				description_fmt.leading = 2;				//Description				var description_txt:TextField = new TextField();					description_txt.width = widths-padding*2;				description_txt.x = padding;				description_txt.y = Math.round(title_txt.y+title_txt.textHeight);				description_txt.autoSize = TextFieldAutoSize.LEFT;								description_txt.wordWrap = true;				description_txt.defaultTextFormat = description_fmt;						description_txt.embedFonts = true;				description_txt.htmlText = description;				description_txt.multiline = true;				description_txt.selectable = false;				description_txt.antiAliasType = "advanced";					description_txt.styleSheet = sheet;				content_mc.addChild(description_txt);				//Background				var bg_mc:MovieClip = new MovieClip();				bg_mc.graphics.beginFill(globals.bgColor, globals.bgAlpha);  				bg_mc.graphics.drawRect(0,0,widths,content_mc.height+padding*2);  				bg_mc.graphics.endFill();				//Add image url to content area				if (url.length!=0) {					bg_mc.urls = url;					bg_mc.targets = target;					bg_mc.mouseChildren = false;					bg_mc.buttonMode = true;					bg_mc.addEventListener(MouseEvent.CLICK, redirect);				}				content_mc.addChildAt(bg_mc, 0);				content_mc.y = Math.round(heights-button_height-globals.bgPaddingBottom-content_mc.height+1);				image_mc.addChild(content_mc);			}			//Run Timer			if (globals.play) {				initTimer();			}		}				//Show content texts when image rollover		private function showContent(e:MouseEvent):void 		{			if (e.target.getChildByName("content_mc")) {				var content_mc = e.target.getChildByName("content_mc");				Tweener.addTween(content_mc,{alpha:1,time:0.3,transition:"easeOutSine"});			}		}				//Hide content texts when image rollout		private function hideContent(e:MouseEvent):void 		{			if (e.target.getChildByName("content_mc")) {				var content_mc = e.target.getChildByName("content_mc");				Tweener.addTween(content_mc,{alpha:0,time:0.3,transition:"easeOutSine"});			}		}				//Set Rounded Corner Radius		private function setRadius(holderMC:MovieClip, maskedMC:MovieClip):void 		{			var posX:int = 0;			var posY:int = 0;			var lineWidth:int = 1;						var lineColor:uint = 0xFFFFFF;					var lineAlpha:int = 1;			var widths:int = globals.width;			var heights:int = globals.height;			var radius:int = globals.radius;			var mask_mc:MovieClip = new MovieClip();			holderMC.addChild(mask_mc);			mask_mc.graphics.beginFill(lineColor,1);			mask_mc.graphics.lineStyle(lineWidth,lineColor,lineAlpha,true);			mask_mc.graphics.moveTo(posX,posY+radius);			mask_mc.graphics.curveTo(posX,posY,posX+radius,posY);			mask_mc.graphics.lineTo(posX+(widths-radius),posY);			mask_mc.graphics.curveTo(posX+widths,posY,posX+widths,posY+radius);			mask_mc.graphics.lineTo(posX+widths,posY+(heights-radius));			mask_mc.graphics.curveTo(posX+widths,posY+heights,posX+(widths-radius),posY+heights);			mask_mc.graphics.lineTo(posX+radius,posY+heights);			mask_mc.graphics.curveTo(posX,posY+heights,posX,posY+(heights-radius));			mask_mc.graphics.lineTo(posX,posY+radius);			mask_mc.graphics.endFill();						maskedMC.mask = mask_mc;		}				//Convert String to Boolean (true=1, false=0)		private function convertToBoolean(txt):Boolean		{			return(txt=="true");		}				//Redirect Url		private function redirect(e:MouseEvent):void 		{			var request:URLRequest = new URLRequest(e.target.urls);            navigateToURL(request, e.target.targets);        }	}}		